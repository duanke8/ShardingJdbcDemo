spring.application.name=ShardingJdbcDemo
server.servlet.context-path=/shardingJdbcDemo

spring.shardingsphere.props.sql-show=true

#内存模式
spring.shardingsphere.mode.type=Memory

# 配置真实数据源
spring.shardingsphere.datasource.names=master

# 配置第 1 个数据源
spring.shardingsphere.datasource.master.type=com.zaxxer.hikari.HikariDataSource
spring.shardingsphere.datasource.master.driver-class-name=com.mysql.jdbc.Driver
spring.shardingsphere.datasource.master.jdbc-url=jdbc:mysql://60.205.209.65:3307/db_user
spring.shardingsphere.datasource.master.username=root
spring.shardingsphere.datasource.master.password=123456


# 由数据源名 + 表名组成，以小数点分隔。多个表以逗号分隔，支持 inline 表达式。缺省表示使用已知数据源与逻辑表名称生成数据节点，用于广播表（即每个库中都需要一个同样的表用于关联查询，多为字典表）或只分库不分表且所有库的表结构完全一致的情况
#spring.shardingsphere.rules.sharding.tables.t_order.actual-data-nodes=master.t_order_0,master.t_order_1
spring.shardingsphere.rules.sharding.tables.t_order.actual-data-nodes=master.t_order_$->{0..1}

##------------------------分库策略
## 分片列名称
#spring.shardingsphere.rules.sharding.tables.t_order.table-strategy.standard.sharding-column=id
## 分片算法名称
#spring.shardingsphere.rules.sharding.tables.t_order.table-strategy.standard.sharding-algorithm-name=alg_inline_userid

##------------------------分片算法配置
## 行表达式分片算法
## 分片算法类型
#spring.shardingsphere.rules.sharding.sharding-algorithms.alg_inline_userid.type=INLINE
## 分片算法属性配置
#spring.shardingsphere.rules.sharding.sharding-algorithms.alg_inline_userid.props.algorithm-expression=t_order_$->{id % 2}

# 标准分片表配置
# 分片列名称，多个列以逗号分隔
spring.shardingsphere.rules.sharding.tables.t_order.table-strategy.standard.sharding-column=uname
# 分片算法名称
spring.shardingsphere.rules.sharding.tables.t_order.table-strategy.standard.sharding-algorithm-name=alg_hash

# 分片算法配置
spring.shardingsphere.rules.sharding.sharding-algorithms.alg_hash.type=HASH_MOD
# 分片算法属性配置
spring.shardingsphere.rules.sharding.sharding-algorithms.alg_hash.props.sharding-count=2
